// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Room = require("./models/room.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Robot = require("./models/robot.bs.js");
var Utils = require("./utils.bs.js");
var React = require("react");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var ExecuteCommandString = require("./services/executeCommandString.bs.js");

function createRobotInRoom(room) {
  return Robot.create(/* East */1, {
              x: room.width / 2 | 0,
              y: room.height / 2 | 0
            });
}

var initialRoom = Room.create(5, 5);

var initialRobot = createRobotInRoom(initialRoom);

function reducer(state, action) {
  if (typeof action === "number") {
    var currentReadbleRobot = Robot.readableRobot(state.robot);
    var commandResult = ExecuteCommandString.run(state.room, state.robot, state.commandString);
    var newRobot = Belt_Result.getWithDefault(Belt_Option.getWithDefault(Belt_Array.getBy(Belt_Array.reverse(commandResult), Belt_Result.isOk), {
              TAG: /* Error */1,
              _0: state.robot
            }), state.robot);
    var readableResult = Belt_Array.map(commandResult, (function (result) {
            if (result.TAG === /* Ok */0) {
              return Robot.readableRobot(result._0);
            } else {
              return "Error command";
            }
          }));
    return {
            room: state.room,
            robot: newRobot,
            commandString: state.commandString,
            commandResult: Belt_Array.concat([currentReadbleRobot], readableResult)
          };
  }
  switch (action.TAG | 0) {
    case /* RoomChangeWidth */0 :
        var newRoom = Room.create(Utils.clampInt(Belt_Option.getWithDefault(Belt_Int.fromString(action._0), state.room.width), 10, 2), state.room.height);
        var newRobot$1 = createRobotInRoom(newRoom);
        return {
                room: newRoom,
                robot: newRobot$1,
                commandString: state.commandString,
                commandResult: state.commandResult
              };
    case /* RoomChangeHeight */1 :
        var newRoom$1 = Room.create(state.room.width, Utils.clampInt(Belt_Option.getWithDefault(Belt_Int.fromString(action._0), state.room.height), 10, 2));
        var newRobot$2 = createRobotInRoom(newRoom$1);
        return {
                room: newRoom$1,
                robot: newRobot$2,
                commandString: state.commandString,
                commandResult: state.commandResult
              };
    case /* CommandInput */2 :
        return {
                room: state.room,
                robot: state.robot,
                commandString: action._0.toUpperCase(),
                commandResult: state.commandResult
              };
    
  }
}

function App(Props) {
  var match = React.useReducer(reducer, {
        room: initialRoom,
        robot: initialRobot,
        commandString: "",
        commandResult: []
      });
  var dispatch = match[1];
  var match$1 = match[0];
  var robot = match$1.robot;
  var room = match$1.room;
  return React.createElement("main", undefined, React.createElement("div", {
                  className: "nes-container is-rounded"
                }, React.createElement("div", {
                      className: "wrapping-inputs"
                    }, React.createElement("div", {
                          className: "nes-container with-title space-between"
                        }, React.createElement("p", {
                              className: "title"
                            }, "Commands"), React.createElement("div", {
                              className: "nes-field space-between"
                            }, React.createElement("label", {
                                  htmlFor: "commands_field"
                                }, "Commands"), React.createElement("input", {
                                  defaultValue: match$1.commandString,
                                  className: "nes-input",
                                  id: "commands_field",
                                  type: "text",
                                  onInput: (function (evt) {
                                      return Curry._1(dispatch, {
                                                  TAG: /* CommandInput */2,
                                                  _0: evt.target.value
                                                });
                                    })
                                })), React.createElement("div", undefined, React.createElement("button", {
                                  className: "nes-btn is-primary",
                                  type: "button",
                                  onClick: (function (param) {
                                      return Curry._1(dispatch, /* DoCommands */0);
                                    })
                                }, "Run"), React.createElement("ol", undefined, Belt_Array.mapWithIndex(match$1.commandResult, (function (i, result) {
                                        return React.createElement("li", {
                                                    key: String(i)
                                                  }, React.createElement("pre", undefined, result));
                                      })))))), React.createElement("div", {
                      className: "nes-container with-title space-between"
                    }, React.createElement("p", {
                          className: "title"
                        }, "Robot"), React.createElement("div", {
                          className: "robot-input"
                        }, React.createElement("p", undefined, "Facing: " + Robot.facingToString(robot.facing)), React.createElement("p", undefined, "Position: " + String(robot.coord.x) + ", " + String(robot.coord.y)))), React.createElement("div", {
                      className: "nes-container with-title"
                    }, React.createElement("p", {
                          className: "title"
                        }, "Room size"), React.createElement("div", {
                          className: "room-input"
                        }, React.createElement("div", {
                              className: "nes-field room-input-field"
                            }, React.createElement("input", {
                                  className: "nes-input",
                                  type: "number",
                                  value: String(room.width),
                                  onChange: (function (evt) {
                                      return Curry._1(dispatch, {
                                                  TAG: /* RoomChangeWidth */0,
                                                  _0: evt.target.value
                                                });
                                    })
                                })), React.createElement("span", undefined, " x "), React.createElement("div", {
                              className: "nes-field room-input-field"
                            }, React.createElement("input", {
                                  className: "nes-input",
                                  type: "number",
                                  value: String(room.height),
                                  onChange: (function (evt) {
                                      return Curry._1(dispatch, {
                                                  TAG: /* RoomChangeHeight */1,
                                                  _0: evt.target.value
                                                });
                                    })
                                }))))));
}

var make = App;

exports.createRobotInRoom = createRobotInRoom;
exports.initialRoom = initialRoom;
exports.initialRobot = initialRobot;
exports.reducer = reducer;
exports.make = make;
/* initialRoom Not a pure module */
