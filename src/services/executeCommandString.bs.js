// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Room = require("../models/room.bs.js");
var Robot = require("../models/robot.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

function parseCommand(command) {
  switch (command) {
    case "F" :
        return {
                TAG: /* Ok */0,
                _0: /* F */0
              };
    case "L" :
        return {
                TAG: /* Ok */0,
                _0: /* Turn */{
                  _0: /* L */0
                }
              };
    case "R" :
        return {
                TAG: /* Ok */0,
                _0: /* Turn */{
                  _0: /* R */1
                }
              };
    default:
      return {
              TAG: /* Error */1,
              _0: command
            };
  }
}

function parseCommandString(commandString) {
  return Belt_Array.map(commandString.split(""), parseCommand);
}

function doCommand(parsedCommand, room, robot) {
  if (parsedCommand.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: Room.keepInsideRoom(room, Robot.move(parsedCommand._0, robot))
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: robot
          };
  }
}

function doCommands(_parsedCommands, room, _robot, _commandResults) {
  while(true) {
    var commandResults = _commandResults;
    var robot = _robot;
    var parsedCommands = _parsedCommands;
    var len = parsedCommands.length;
    if (len !== 1) {
      if (len === 0) {
        return commandResults;
      }
      var command = Caml_array.get(parsedCommands, 0);
      var rest = Belt_Array.sliceToEnd(parsedCommands, 1);
      var commandResult = doCommand(command, room, robot);
      if (commandResult.TAG === /* Ok */0) {
        _commandResults = Belt_Array.concat(commandResults, [commandResult]);
        _robot = commandResult._0;
        _parsedCommands = rest;
        continue ;
      }
      _commandResults = Belt_Array.concat(commandResults, [commandResult]);
      _parsedCommands = rest;
      continue ;
    }
    var command$1 = parsedCommands[0];
    return Belt_Array.concat(commandResults, [doCommand(command$1, room, robot)]);
  };
}

function run(room, robot, commandString) {
  return doCommands(parseCommandString(commandString), room, robot, []);
}

exports.parseCommand = parseCommand;
exports.parseCommandString = parseCommandString;
exports.doCommand = doCommand;
exports.doCommands = doCommands;
exports.run = run;
/* No side effect */
